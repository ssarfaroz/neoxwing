datasource db { provider = "sqlite"; url = env("DATABASE_URL") }
generator client { provider = "prisma-client-js" }

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  analysisJobs  AnalysisJob[]
  tradePlans    TradePlan[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model AnalysisJob {
  id        String   @id @default(cuid())
  userId    String
  status    String   @default("done")
  params    Json?
  imageRef  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan TradePlan?
}

model TradePlan {
  id          String   @id @default(cuid())
  userId      String
  jobId       String?  @unique
  direction   String
  entryLow    Float
  entryHigh   Float
  stop        Float
  takeProfits Json
  rr          Float?
  confidence  Float
  timeframe   String?
  reasoning   Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user  User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  job   AnalysisJob? @relation(fields: [jobId], references: [id], onDelete: SetNull)
  votes StrategyVote[]
}

model StrategyVote {
  id     String   @id @default(cuid())
  planId String
  name   String
  vote   Int
  weight Float
  plan TradePlan @relation(fields: [planId], references: [id], onDelete: Cascade)
}
